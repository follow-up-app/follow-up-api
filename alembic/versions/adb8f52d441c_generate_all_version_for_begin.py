"""generate all version for begin

Revision ID: adb8f52d441c
Revises: 
Create Date: 2024-02-11 01:29:11.761224

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils


# revision identifiers, used by Alembic.
revision = 'adb8f52d441c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('document', sa.String(length=255), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('complement', sa.String(length=255), nullable=True),
    sa.Column('zip_code', sa.String(length=255), nullable=False),
    sa.Column('city', sa.String(length=255), nullable=False),
    sa.Column('state', sa.String(length=255), nullable=False),
    sa.Column('country', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'IN_ANALYSIS', 'BLOCKED', 'DESACATIVE', name='statuscompany'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('contractors',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('company_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'IN_PREPARATION', 'INACTIVE', name='statuscontract'), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('skills',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('company_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('objective', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('specialties_instructor',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('company_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('specialty', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('company_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('fullname', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('document', sa.String(length=20), nullable=True),
    sa.Column('permission', sa.Enum('ADMIN', 'INSTRUCTOR', 'PARENTS', name='userpermission'), nullable=False),
    sa.Column('image_path', sa.String(length=100), nullable=True),
    sa.Column('position', sa.String(length=100), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='status'), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('contract_responsibles',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('contractor_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('fullname', sa.String(length=100), nullable=False),
    sa.Column('birthday', sa.Date(), nullable=True),
    sa.Column('document', sa.String(length=20), nullable=True),
    sa.Column('indentity_number', sa.String(length=100), nullable=True),
    sa.Column('org_exp', sa.String(length=10), nullable=True),
    sa.Column('uf_exp', sa.String(length=5), nullable=True),
    sa.Column('nationality', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('bond', sa.String(length=50), nullable=True),
    sa.Column('main_contract', sa.Boolean(), nullable=True),
    sa.Column('avatar', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['contractor_id'], ['contractors.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('instructors',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('company_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('specialty_instructor_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('fullname', sa.String(length=100), nullable=False),
    sa.Column('document', sa.String(length=100), nullable=False),
    sa.Column('indentity_number', sa.String(length=100), nullable=True),
    sa.Column('org_exp', sa.String(length=10), nullable=True),
    sa.Column('uf_exp', sa.String(length=5), nullable=True),
    sa.Column('nationality', sa.String(length=20), nullable=True),
    sa.Column('birthday', sa.Date(), nullable=True),
    sa.Column('document_company', sa.String(length=20), nullable=True),
    sa.Column('social_name', sa.String(length=100), nullable=True),
    sa.Column('fantasy_name', sa.String(length=100), nullable=True),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('whats_app', sa.Boolean(), nullable=True),
    sa.Column('value_hour', sa.String(length=50), nullable=True),
    sa.Column('value_mouth', sa.String(length=50), nullable=True),
    sa.Column('comission', sa.String(length=50), nullable=True),
    sa.Column('avatar', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='status'), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.ForeignKeyConstraint(['specialty_instructor_id'], ['specialties_instructor.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('students',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('contractor_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('fullname', sa.String(length=255), nullable=False),
    sa.Column('birthday', sa.Date(), nullable=True),
    sa.Column('allergy', sa.String(length=20), nullable=True),
    sa.Column('genere', sa.Enum('FEMALE', 'MALE', 'OTHERS', name='genere'), nullable=False),
    sa.Column('document', sa.String(length=20), nullable=True),
    sa.Column('indentity_number', sa.String(length=100), nullable=True),
    sa.Column('org_exp', sa.String(length=10), nullable=True),
    sa.Column('uf_exp', sa.String(length=5), nullable=True),
    sa.Column('nationality', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=50), nullable=True),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('avatar', sa.String(length=255), nullable=True),
    sa.Column('informations', sa.String(length=500), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='status'), nullable=False),
    sa.ForeignKeyConstraint(['contractor_id'], ['contractors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('contract_address',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('contractor_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('responsible_contract_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('complement', sa.String(length=60), nullable=True),
    sa.Column('zip_code', sa.String(length=14), nullable=False),
    sa.Column('district', sa.String(length=50), nullable=False),
    sa.Column('city', sa.String(length=50), nullable=False),
    sa.Column('state', sa.String(length=2), nullable=False),
    sa.ForeignKeyConstraint(['contractor_id'], ['contractors.id'], ),
    sa.ForeignKeyConstraint(['responsible_contract_id'], ['contract_responsibles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('instructor_address',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('instructor_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('complement', sa.String(length=60), nullable=True),
    sa.Column('zip_code', sa.String(length=14), nullable=False),
    sa.Column('district', sa.String(length=50), nullable=False),
    sa.Column('city', sa.String(length=50), nullable=False),
    sa.Column('state', sa.String(length=2), nullable=False),
    sa.ForeignKeyConstraint(['instructor_id'], ['instructors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('procedures',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('skill_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('tries', sa.Integer(), nullable=False),
    sa.Column('goal', sa.Float(), nullable=False),
    sa.Column('period', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('objective', sa.String(length=1000), nullable=True),
    sa.Column('stimulus', sa.String(length=1000), nullable=True),
    sa.Column('answer', sa.String(length=1000), nullable=True),
    sa.Column('consequence', sa.String(length=1000), nullable=True),
    sa.Column('materials', sa.String(length=1000), nullable=True),
    sa.Column('help', sa.String(length=1000), nullable=True),
    sa.Column('student_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('schedules',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('company_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('instructor_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('student_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('event_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('start', sa.DateTime(), nullable=False),
    sa.Column('end', sa.DateTime(), nullable=False),
    sa.Column('start_hour', sa.String(length=20), nullable=True),
    sa.Column('end_hour', sa.String(length=20), nullable=True),
    sa.Column('repeat', sa.Enum('NO', 'WEEK', 'MOUTH', name='eventrepeat'), nullable=True),
    sa.Column('period', sa.String(length=20), nullable=True),
    sa.Column('status', sa.Enum('SCHEDULED', 'IN_PROGRESS', 'PAUSED', 'CANCELED', 'DID_NOT_ATTEND', 'DONE', name='statusschedule'), nullable=False),
    sa.Column('details', sa.String(length=255), nullable=True),
    sa.Column('student_arrival', sa.DateTime(), nullable=True),
    sa.Column('event_begin', sa.DateTime(), nullable=True),
    sa.Column('event_finish', sa.DateTime(), nullable=True),
    sa.Column('event_user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('color', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.ForeignKeyConstraint(['event_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['instructor_id'], ['instructors.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('executions',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('schedule_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('procedure_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('trie', sa.Integer(), nullable=False),
    sa.Column('time', sa.String(length=255), nullable=False),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('help_type', sa.Enum('DEPENDENT', 'INDEPENDENT', 'POSITIONAL', 'GESTURE', 'VERBAL', 'PHYSICAL', 'VISUAL', name='typehelp'), nullable=False),
    sa.ForeignKeyConstraint(['procedure_id'], ['procedures.id'], ),
    sa.ForeignKeyConstraint(['schedule_id'], ['schedules.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('skills_schedules',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('schedule_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('skill_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('finished', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['schedule_id'], ['schedules.id'], ),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('skills_schedules')
    op.drop_table('executions')
    op.drop_table('schedules')
    op.drop_table('procedures')
    op.drop_table('instructor_address')
    op.drop_table('contract_address')
    op.drop_table('students')
    op.drop_table('instructors')
    op.drop_table('contract_responsibles')
    op.drop_table('users')
    op.drop_table('specialties_instructor')
    op.drop_table('skills')
    op.drop_table('contractors')
    op.drop_table('companies')
    # ### end Alembic commands ###
