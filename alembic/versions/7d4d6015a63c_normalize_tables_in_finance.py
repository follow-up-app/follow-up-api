"""normalize tables in finance

Revision ID: 7d4d6015a63c
Revises: 30e949f9cd62
Create Date: 2024-11-08 03:02:10.316207

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision = '7d4d6015a63c'
down_revision = '30e949f9cd62'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('company_invoice_logs',
                    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('deleted', sa.Boolean(), nullable=False),
                    sa.Column('created_date', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('company_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('city_code', sa.String(
                        length=50), nullable=False),
                    sa.Column('aliquot', sa.Integer(), nullable=False),
                    sa.Column('item_list_service', sa.String(
                        length=50), nullable=False),
                    sa.Column('municipal_tax_code', sa.String(
                        length=50), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['company_id'], ['companies.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('company_invoice_tokens',
                    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('deleted', sa.Boolean(), nullable=False),
                    sa.Column('created_date', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('company_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('token', sa.String(length=250), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['company_id'], ['companies.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('health_plans',
                    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('deleted', sa.Boolean(), nullable=False),
                    sa.Column('created_date', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('company_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('social_name', sa.String(
                        length=100), nullable=True),
                    sa.Column('fantasy_name', sa.String(
                        length=100), nullable=True),
                    sa.Column('document', sa.String(length=20), nullable=True),
                    sa.Column('address', sa.String(
                        length=255), nullable=False),
                    sa.Column('number_address', sa.Integer(), nullable=True),
                    sa.Column('complement', sa.String(
                        length=255), nullable=True),
                    sa.Column('zip_code', sa.String(
                        length=255), nullable=False),
                    sa.Column('city', sa.String(length=255), nullable=False),
                    sa.Column('state', sa.String(length=255), nullable=False),
                    sa.Column('country', sa.String(length=255), nullable=True),
                    sa.Column('email', sa.String(length=50), nullable=False),
                    sa.Column('phone', sa.String(length=50), nullable=True),
                    sa.Column('active', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['company_id'], ['companies.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('invoice_logs',
                    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('deleted', sa.Boolean(), nullable=False),
                    sa.Column('created_date', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('invoice_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('history', sa.String(
                        length=250), nullable=False),
                    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('student_health_plans',
                    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('deleted', sa.Boolean(), nullable=False),
                    sa.Column('created_date', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('student_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('health_plan_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.ForeignKeyConstraint(['health_plan_id'], [
                                            'health_plans.id'], ),
                    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('invoice_billings',
                    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('deleted', sa.Boolean(), nullable=False),
                    sa.Column('created_date', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('invoice_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.Column('billing_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), nullable=False),
                    sa.ForeignKeyConstraint(['billing_id'], ['bilings.id'], ),
                    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.drop_table('student_plans')
    op.drop_table('plans')
    op.drop_table('invoices_billings')
    op.add_column('bilings', sa.Column(
        'generate_invoice', sa.Boolean(), nullable=True))
    op.add_column('bilings', sa.Column(
        'date_generate_invoice', sa.DateTime(), nullable=True))
    op.add_column('invoices', sa.Column(
        'reference', sa.String(length=250), nullable=False))

    invoiceenum_ = sa.Enum('NOT_FOUND',
                                  'CANCELED',
                                  'NOT_AUTHORIZED',
                                  'INVALID_REQUEST',
                                  'COMPANY_NOT_QUALIFIED',
                                  'CERTIFICATE_EXPIRED',
                                  'AUTHORIZED',
                                  'IN_PROCESS',
                                  name='invoiceenum',
                                  create_type=False)
    invoiceenum_.create(op.get_bind(), checkfirst=True)
    op.add_column('invoices', sa.Column('status', invoiceenum_, nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('invoices', 'status')
    op.drop_column('invoices', 'reference')
    op.drop_column('bilings', 'date_generate_invoice')
    op.drop_column('bilings', 'generate_invoice')
    op.create_table('student_plans',
                    sa.Column('id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('deleted', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_date', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('student_id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('plan_id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE',
                                                        name='statusenum'), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(
                        ['plan_id'], ['plans.id'], name='student_plans_plan_id_fkey'),
                    sa.ForeignKeyConstraint(
                        ['student_id'], ['students.id'], name='student_plans_student_id_fkey'),
                    sa.PrimaryKeyConstraint('id', name='student_plans_pkey')
                    )
    op.create_table('invoices_billings',
                    sa.Column('id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('deleted', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_date', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('invoice_id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('billing_id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(
                        ['billing_id'], ['bilings.id'], name='invoices_billings_billing_id_fkey'),
                    sa.ForeignKeyConstraint(
                        ['invoice_id'], ['invoices.id'], name='invoices_billings_invoice_id_fkey'),
                    sa.PrimaryKeyConstraint(
                        'id', name='invoices_billings_pkey')
                    )
    op.create_table('plans',
                    sa.Column('id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('deleted', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_date', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('company_id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('social_name', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=True),
                    sa.Column('fantasy_name', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=True),
                    sa.Column('email', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=False),
                    sa.Column('phone', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(
                        ['company_id'], ['companies.id'], name='plans_company_id_fkey'),
                    sa.PrimaryKeyConstraint('id', name='plans_pkey')
                    )
    op.drop_table('invoice_billings')
    op.drop_table('student_health_plans')
    op.drop_table('invoice_logs')
    op.drop_table('health_plans')
    op.drop_table('company_invoice_tokens')
    op.drop_table('company_invoice_logs')
    # ### end Alembic commands ###
